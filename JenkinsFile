//variables
def project = 'ci-cd-jenkins' 
def appName = 'nodejsapp' 
def serviceName = "${appName}-frontend" 
def imageVersion = 'prod' 
def namespace = 'production' 
def imageTag = "gcr.io/${project}/${appName}:${imageVersion}.${env.BUILD_ID}"
pipeline {
    agent any
    environment {
     dockerRegistry = "vjykr/docker-nodejs"
     dockerRegistryCredential = 'dockerhub'
     dockerImage = ''
     KUBERNETES_MASTER= 'master-node'
   }
    stages {
        
        stage('Cloning Git') {
            steps {
                git 'https://github.com/vijaykumarmcp/nodejs-demoapp'
            }
         }
        stage('Build Project') {
            steps {
            sh 'npm install'
            }
        }
         stage('Run Unit Test') {
            steps {
                sh 'npm test'
            }
          }
          stage('SonarQube Analysis') {
            steps {
                sh '/opt/sonar-scanner/sonar-scanner-4.3.0.2102-linux/bin/sonar-scanner -Dsonar.host.url=http://localhost:9000 -Dsonar.projectKey=nodejsapp:demo -Dsonar.projectName=Nodejs-demoapp -Dsonar.projectVersion=1.0 -Dsonar.language=js -Dsonar.sources=. -Dsonar.sourceEncoding=UTF-8 -Dsonar.exclusions=/**/*.spec.js -Dsonar.test.inclusions=/**/*.spec.js -Dsonar.coverage.exclusions=/**/*.spec.js,/**/*.mock.js,node_modules/*,coverage/lcov-report/* -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info'
            }
          }
        stage("Build image") {
            steps {
                script {
                    myapp = docker.build("vjykr/docker-nodejs:${env.BUILD_ID}")
                }
            }
        }
        stage("Push image") {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                            myapp.push("latest")
                            myapp.push("${env.BUILD_ID}")
                    }
                }
            }
        }
        stage ('Deploy') {
           steps {
               script{
                   //deploy to kubernetes cluster
                   sh 'ansible-playbook -i /opt/ansible/hosts /opt/ansible/playbook.yml'

                   //grab external Ip
                   //sh 'kubectl get services external-endpoint'
               }
           }
        }        
    }    
}