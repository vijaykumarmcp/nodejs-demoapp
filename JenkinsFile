pipeline {
    agent any
    def project = 'ci-cd-jenkins' 
    def appName = 'nodejsapp' 
    def serviceName = "${appName}-frontend" 
    def imageVersion = 'prod' 
    def namespace = 'producation' 
    def imageTag = "gcr.io/${project}/${appName}:${imageVersion}.${env.BUILD_ID}" 
    environment {
     dockerRegistry = "vjykr/docker-nodejs"
     dockerRegistryCredential = 'dockerhub'
     dockerImage = ''
   }
    stages {
        
        stage('Cloning Git') {
            steps {
                git 'https://github.com/vijaykumarmcp/nodejs-demoapp'
            }
         }
        stage('Build') {
            steps {
            sh 'npm install --production'
            }
        }
         stage('Run Unit Test') {
            steps {
                sh 'npm test'
            }
          }
        stage("Build image") {
            steps {
                script {
                    myapp = docker.build("vjykr/docker-nodejs:${env.BUILD_ID}")
                }
            }
        }
        stage("Push image") {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                            myapp.push("latest")
                            myapp.push("${env.BUILD_ID}")
                    }
                }
            }
        }
        stage ('Deploy') {
           steps {
                // Create namespace if it doesn't exist 
                sh("kubectl get ns ${namespace} || kubectl create ns ${namespace} .") 

                //Update the imagetag to the latest version 
                ("sed -i.bak 's#gcr.io/${project}/${appName}:${imageVersion}#${imageTag}# ./etc/kubernetes/k8s/development/*.yaml ")

                //Create or update resources 
                sh("kubectl --namespace=${namespace} apply -f /etc/kubernetes/k8s/development/deployment.yaml") 
                sh("kubectl --namespace=${namespace} apply -f /etc/kubernetes/k8s/development/service.yaml") 

                //Grab the external Ip address of the service 
                sh("echo http://`kubectl --namespace=${namespace} get service/${feSvcName} --output=json | jq -r .status.loadBalancer.ingress[0].ip'` > ${feSvcName} .")
           }
        }        
    }    
}